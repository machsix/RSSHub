name: 'Docker Release'

on:
  push:
    paths:
      - 'lib/**'
      - '!lib/**/*.test.ts'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch: {}

jobs:
  check-env:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      check-docker: ${{ steps.check-docker.outputs.defined }}
    steps:
      - id: check-docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        if: ${{ env.DOCKER_USERNAME != '' }}
        run: echo "defined=true" >> $GITHUB_OUTPUT

  set-cache:
    runs-on: ubuntu-latest
    outputs:
      cache-from: ${{ steps.final.outputs.cache-from }}
      cache-to: ${{ steps.final.outputs.cache-to }}
    steps:
      - name: Initial check
        id: check-cache
        uses: actions/cache@v4
        with:
          path: /tmp/check-cache
          key: check-cache

      - name: Create dummy cache
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: cat /proc/version > /tmp/check-cache

      - name: Save cache if necessary
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: /tmp/check-cache
          key: check-cache

      - name: Second check
        if: steps.check-cache.outputs.cache-hit != 'true'
        id: check-cache-again
        uses: actions/cache@v4
        with:
          path: /tmp/check-cache
          key: check-cache

      - name: Finalize cache status
        id: final
        run: |
          if [ "${{ steps.check-cache.outputs.cache-hit }}" = "true" ] || [ "${{ steps.check-cache-again.outputs.cache-hit }}" = "true" ]; then
            echo "cache-from=type=gha,scope=docker-release" >> $GITHUB_OUTPUT
            echo "cache-to=type=gha,mode=max,scope=docker-release" >> $GITHUB_OUTPUT
          else
            echo "cache-from=" >> $GITHUB_OUTPUT
            echo "cache-to=" >> $GITHUB_OUTPUT
          fi
          rm /tmp/check-cache

  release:
    runs-on: ubuntu-latest
    needs: [check-env, set-cache]
    if: needs.check-env.outputs.check-docker == 'true'
    timeout-minutes: 120
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (ordinary version)
        id: meta-ordinary
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/rsshub
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=true
            type=raw,value={{date 'YYYY-MM-DD'}},enable=true
            type=sha,format=long,prefix=,enable=true
          flavor: latest=false

      - name: Build and push Docker image (ordinary version)
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta-ordinary.outputs.tags }}
          labels: ${{ steps.meta-ordinary.outputs.labels }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          cache-from: ${{ needs.set-cache.outputs.cache-from }}
          cache-to: ${{ needs.set-cache.outputs.cache-to }}

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: 'true'
        run: echo "${{ steps.meta-ordinary.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build-and-push.outputs.digest }}


  description:
    runs-on: ubuntu-latest
    needs: check-env
    if: needs.check-env.outputs.check-docker == 'true'
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/rsshub
